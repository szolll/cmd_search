# Name of the workflow
name: Language Checker

# Controls when the action will run.
# Runs on push and pull requests to the main branch, and allows manual triggering.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-languages:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checks out the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up jq for JSON processing
      - name: Cache jq
        uses: actions/cache@v4
        with:
          path: ~/jq
          key: jq-${{ runner.os }}-v1.7
      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            mkdir -p ~/jq
            curl -L https://github.com/jqlang/jq/releases/download/jq-1.7/jq-linux64 -o ~/jq/jq
            chmod +x ~/jq/jq
            echo "~/jq" >> $GITHUB_PATH
          fi

      # Step 3: Retrieve repository language statistics via GitHub API with retries
      - name: Get Repository Languages
        id: list-languages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for attempt in {1..3}; do
            response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/languages")
            if echo "$response" | jq . > /dev/null 2>&1; then
              echo "languages=$response" >> $GITHUB_ENV
              echo "API call succeeded on attempt $attempt"
              break
            else
              echo "API call failed on attempt $attempt: $response"
              if [ $attempt -eq 3 ]; then
                echo "Error: Failed to retrieve valid JSON after 3 attempts."
                exit 1
              fi
              sleep 2
            fi
          done
        continue-on-error: false

      # Step 4: Validate and display language breakdown
      - name: Display Language Breakdown
        run: |
          echo "Repository Language Breakdown:"
          echo "------------------------------"
          if [ -z "$languages" ]; then
            echo "Error: No language statistics retrieved."
            exit 1
          fi
          # Log raw output for debugging
          echo "Raw language output: $languages"
          # Validate JSON format
          if ! echo "$languages" | jq . > /dev/null 2>&1; then
            echo "Error: Invalid JSON format in language statistics."
            exit 1
          fi
          # Check if relevant languages exist
          relevant_langs=$(echo "$languages" | jq -r '
            with_entries(select(.key | IN("HTML", "CSS", "JavaScript", "YAML"))) |
            to_entries | length')
          if [ "$relevant_langs" -eq 0 ]; then
            echo "No HTML, CSS, JavaScript, or YAML files found."
          else
            echo "$languages" | jq -r '
              with_entries(select(.key | IN("HTML", "CSS", "JavaScript", "YAML"))) |
              (map(.value) | add) as $total |
              to_entries |
              sort_by(-.value) |
              .[] | "\(.key): \(.value / $total * 100 | (. * 10 | round / 10))% (\(.value) bytes)"
            '
          fi

  lint-workflows:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checks out the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Run actionlint for workflow files
      - name: Run actionlint
        run: |
          if compgen -G ".github/workflows/*.yml" > /dev/null; then
            docker run --rm -v ${{ github.workspace }}:/repo --workdir /repo rhysd/actionlint:latest -color .github/workflows/*.yml
          else
            echo "No workflow YAML files found to lint."
          fi
        continue-on-error: true

  lint-code:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checks out the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Install yamllint
      - name: Install yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint

      # Step 3: Run yamllint for YAML files
      - name: Run yamllint
        run: |
          if compgen -G "**/*.yml" > /dev/null || compgen -G "**/*.yaml" > /dev/null; then
            yamllint --strict **/*.yml **/*.yaml
          else
            echo "No YAML files found to lint."
          fi
        continue-on-error: true

      # Step 4: Set up Node.js for ESLint and Stylelint
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
        if: ${{ github.event_name != 'workflow_dispatch' && (hashFiles('**/*.js') != '' || hashFiles('**/*.css') != '') }}

      # Step 5: Install ESLint and Stylelint if package.json exists
      - name: Install linting tools
        run: |
          if [ -f package.json ]; then
            npm install --save-dev eslint stylelint stylelint-config-standard
            npx eslint --init --yes || true
          else
            echo "No package.json found, skipping ESLint and Stylelint setup."
          fi
        if: ${{ github.event_name != 'workflow_dispatch' && (hashFiles('**/*.js') != '' || hashFiles('**/*.css') != '') }}

      # Step 6: Run ESLint for JavaScript
      - name: Run ESLint
        run: |
          if compgen -G "**/*.js" > /dev/null; then
            npx eslint **/*.js
          else
            echo "No JavaScript files found to lint."
          fi
        continue-on-error: true
        if: ${{ github.event_name != 'workflow_dispatch' && hashFiles('**/*.js') != '' }}

      # Step 7: Run Stylelint for CSS
      - name: Run Stylelint
        run: |
          if compgen -G "**/*.css" > /dev/null; then
            npx stylelint **/*.css
          else
            echo "No CSS files found to lint."
          fi
        continue-on-error: true
        if: ${{ github.event_name != 'workflow_dispatch' && hashFiles('**/*.css') != '' }}

  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      # Step 1: Checks out the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Initialize CodeQL for JavaScript
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality
          config-file: .codeql/codeql-config.yml
        continue-on-error: true
        if: ${{ github.event_name != 'workflow_dispatch' && (hashFiles('**/*.html') != '' || hashFiles('**/*.css') != '' || hashFiles('**/*.js') != '' || hashFiles('**/*.yaml') != '' || hashFiles('**/*.yml') != '') }}

      # Step 3: Autobuild for JavaScript
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        continue-on-error: true
        if: ${{ github.event_name != 'workflow_dispatch' && (hashFiles('**/*.html') != '' || hashFiles('**/*.css') != '' || hashFiles('**/*.js') != '' || hashFiles('**/*.yaml') != '' || hashFiles('**/*.yml') != '') }}

      # Step 4: Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true
        if: ${{ github.event_name != 'workflow_dispatch' && (hashFiles('**/*.html') != '' || hashFiles('**/*.css') != '' || hashFiles('**/*.js') != '' || hashFiles('**/*.yaml') != '' || hashFiles('**/*.yml') != '') }}
