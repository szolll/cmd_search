# Name of the workflow
name: Language Checker

# Controls when the action will run.
# Runs on push and pull requests to the main branch, and allows manual triggering.
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-languages:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checks out the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Set up jq for JSON processing
      - name: Cache jq
        uses: actions/cache@v4
        id: cache-jq
        with:
          path: ~/.jq-cache
          key: jq-${{ runner.os }}-v1.7
      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            mkdir -p ~/.jq-cache
            curl -L https://github.com/jqlang/jq/releases/download/jq-1.7/jq-linux64 -o ~/.jq-cache/jq
            chmod +x ~/.jq-cache/jq
            echo "~/.jq-cache" >> $GITHUB_PATH
          fi
        if: steps.cache-jq.outputs.cache-hit != 'true'

      # Step 3: Retrieve repository language statistics via GitHub API with retries
      - name: Get Repository Languages
        id: list-languages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for attempt in {1..3}; do
            response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/languages")
            echo "Raw API response (attempt $attempt): $response" >> language_response.log
            if echo "$response" | jq . > /dev/null 2>&1; then
              # Write response to a temporary file to avoid env command issues
              echo "$response" > language_response.json
              # Encode response to handle special characters
              encoded_response=$(base64 -w0 language_response.json)
              echo "languages=$encoded_response" >> $GITHUB_ENV
              echo "API call succeeded on attempt $attempt"
              break
            else
              echo "API call failed on attempt $attempt: $response"
              if [ $attempt -eq 3 ]; then
                echo "Error: Failed to retrieve valid JSON after 3 attempts."
                cat language_response.log
                exit 1
              fi
              sleep 2
            fi
          done
        continue-on-error: false

      # Step 4: Validate and display language breakdown
      - name: Display Language Breakdown
        run: |
          echo "Repository Language Breakdown:"
          echo "------------------------------"
          if [ -z "$languages" ]; then
            echo "Error: No language statistics retrieved."
            exit 1
          fi
          # Decode the response
          decoded_languages=$(echo "$languages" | base64 -d)
          # Log raw output for debugging
          echo "Raw language output: $decoded_languages"
          # Validate JSON format
          if ! echo "$decoded_languages" | jq . > /dev/null 2>&1; then
            echo "Error: Invalid JSON format in language statistics."
            exit 1
          fi
          # Check if relevant languages exist
          relevant_langs=$(echo "$decoded_languages" | jq -r '
            to_entries | map(select(.key | IN("HTML", "CSS", "JavaScript", "YAML"))) | length')
          if [ "$relevant_langs" -eq 0 ]; then
            echo "No HTML, CSS, JavaScript, or YAML files found."
          else
            echo "$decoded_languages" | jq -r '
              to_entries |
              map(select(.key | IN("HTML", "CSS", "JavaScript", "YAML"))) |
              (map(.value) | add) as $total |
              sort_by(-.value) |
              .[] | "\(.key): \(.value / $total * 100 | (. * 10 | round / 10))% (\(.value) bytes)"
            ' | tee language_breakdown.txt
          fi

      # Step 5: Debug Job Completion
      - name: Debug Job Completion
        run: echo "Check-languages job completed successfully."

  lint-workflows:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checks out the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Run actionlint for workflow files
      - name: Run actionlint
        run: |
          if compgen -G ".github/workflows/*.yml" > /dev/null; then
            docker run --rm -v ${{ github.workspace }}:/repo --workdir /repo rhysd/actionlint:latest -color .github/workflows/*.yml | tee -a lint_results.txt
          else
            echo "No workflow YAML files found to lint." | tee -a lint_results.txt
          fi
        continue-on-error: true

      # Step 3: Debug Job Completion
      - name: Debug Job Completion
        run: echo "Lint-workflows job completed successfully."

      # Step 4: Commit Linting Results
      - name: Commit Linting Results
        run: |
          if [ -f lint_results.txt ]; then
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add lint_results.txt
            git commit -m "Update linting results" || echo "No changes to commit"
            git push || echo "No push permission or no changes"
          fi
        if: ${{ github.event_name != 'pull_request' }}
        continue-on-error: true

  lint-code:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checks out the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Cache apt packages
      - name: Cache apt packages
        uses: actions/cache@v4
        id: apt-cache
        with:
          path: /var/cache/apt/archives
          key: apt-${{ runner.os }}-yamllint-${{ hashFiles('/etc/apt/sources.list.d/*') }}
        continue-on-error: true

      # Step 3: Install yamllint
      - name: Install yamllint
        run: |
          if [ -d /var/cache/apt/archives ]; then
            sudo apt-get update
            sudo apt-get install -y yamllint
          else
            echo "No apt cache directory found, skipping installation."
          fi
        if: steps.apt-cache.outputs.cache-hit != 'true'
        continue-on-error: true

      # Step 4: Run yamllint for YAML files
      - name: Run yamllint
        run: |
          if compgen -G "**/*.yml" > /dev/null || compgen -G "**/*.yaml" > /dev/null; then
            yamllint --strict **/*.yml **/*.yaml | tee -a lint_results.txt
          else
            echo "No YAML files found to lint." | tee -a lint_results.txt
          fi
        continue-on-error: true

      # Step 5: Set up Node.js for ESLint and Stylelint
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
        if: ${{ github.event_name != 'workflow_dispatch' && (hashFiles('**/*.js') != '' || hashFiles('**/*.css') != '') }}

      # Step 6: Install ESLint and Stylelint if package.json exists
      - name: Install linting tools
        run: |
          if [ -f package.json ]; then
            npm install --save-dev eslint stylelint stylelint-config-standard
            npx eslint --init --yes || true
          else
            echo "No package.json found, skipping ESLint and Stylelint setup." | tee -a lint_results.txt
          fi
        if: ${{ github.event_name != 'workflow_dispatch' && (hashFiles('**/*.js') != '' || hashFiles('**/*.css') != '') }}

      # Step 7: Run ESLint for JavaScript
      - name: Run ESLint
        run: |
          if compgen -G "**/*.js" > /dev/null; then
            npx eslint **/*.js | tee -a lint_results.txt
          else
            echo "No JavaScript files found to lint." | tee -a lint_results.txt
          fi
        continue-on-error: true
        if: ${{ github.event_name != 'workflow_dispatch' && hashFiles('**/*.js') != '' }}

      # Step 8: Run Stylelint for CSS
      - name: Run Stylelint
        run: |
          if compgen -G "**/*.css" > /dev/null; then
            npx stylelint **/*.css | tee -a lint_results.txt
          else
            echo "No CSS files found to lint." | tee -a lint_results.txt
          fi
        continue-on-error: true
        if: ${{ github.event_name != 'workflow_dispatch' && hashFiles('**/*.css') != '' }}

      # Step 9: Debug Job Completion
      - name: Debug Job Completion
        run: echo "Lint-code job completed successfully."

      # Step 10: Commit Linting Results
      - name: Commit Linting Results
        run: |
          if [ -f lint_results.txt ]; then
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git add lint_results.txt
            git commit -m "Update linting results" || echo "No changes to commit"
            git push || echo "No push permission or no changes"
          fi
        if: ${{ github.event_name != 'pull_request' }}
        continue-on-error: true

  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      # Step 1: Checks out the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Check for relevant files
      - name: Check for Relevant Files
        id: check-files
        run: |
          if compgen -G "**/*.html" > /dev/null || compgen -G "**/*.css" > /dev/null || \
             compgen -G "**/*.js" > /dev/null || compgen -G "**/*.yaml" > /dev/null || \
             compgen -G "**/*.yml" > /dev/null; then
            echo "Relevant files found."
            echo "files_found=true" >> $GITHUB_ENV
          else
            echo "No relevant files (HTML, CSS, JS, YAML) found."
            echo "files_found=false" >> $GITHUB_ENV
          fi

      # Step 3: Verify CodeQL config file
      - name: Verify CodeQL Config
        run: |
          if [ -f .codeql/codeql-config.yml ]; then
            echo "CodeQL config file found."
          else
            echo "Error: CodeQL config file (.codeql/codeql-config.yml) not found."
            exit 1
          fi
        if: env.files_found == 'true'

      # Step 4: Initialize CodeQL for JavaScript
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality
          config-file: .codeql/codeql-config.yml
        continue-on-error: true
        if: env.files_found == 'true'

      # Step 5: Autobuild for JavaScript
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        continue-on-error: true
        if: env.files_found == 'true'

      # Step 6: Perform CodeQL Analysis
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true
        if: env.files_found == 'true'

      # Step 7: Debug Job Completion
      - name: Debug Job Completion
        run: |
          if [ "$files_found" == "true" ]; then
            echo "CodeQL-analysis job completed successfully."
          else
            echo "CodeQL-analysis job skipped due to no relevant files."
          fi
